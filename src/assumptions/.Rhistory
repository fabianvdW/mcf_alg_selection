knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
# Import data
runtime_data <- as.matrix(read.csv('runtime_data_3d.csv', header=FALSE))
# Read shape information and reshape the data
shape <- as.numeric(strsplit(readLines('data_shape.txt'), ',')[[1]])
runtime_array <- array(runtime_data, dim = shape)
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value
results_matrix[j, i] <- test_result$p_value
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value, "\n")
}
}
View(runtime_data)
View(runtime_array)
runtime_array[1, 1, :]
runtime_array[1; 1; :]
runtime_array[1, 1]
runtime_array[1, 1, .]
runtime_array[1, 1, ;]
runtime_array[1, 1, ]
runtime_array[2, 2, ]
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
library(R.matlab)
loadMat
readMat
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
library(matlab)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
library(R.matlab)
install.packages("R.matlab")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
library(R.matlab)
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime_list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value
results_matrix[j, i] <- test_result$p_value
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value, "\n")
}
}
runtime_array[1, 1, ]
runtime_array[2, 2, ]
View(combinations_indices)
View(combinations_indices)
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value, "\n")
}
}
# Set diagonal to 1 (self-comparison)
diag(results_matrix) <- 1
# Export P-value matrix as .mat file
writeMat("p_value_matrix.mat", p_value_matrix = results_matrix)
cat("\nP-value matrix exported to 'p_value_matrix.mat'\n")
# Convert results to a data frame for analysis
results_df <- data.frame()
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- paste(combinations_indices[i, ], collapse = ",")
c_2 <- paste(combinations_indices[j, ], collapse = ",")
results_df <- rbind(results_df, data.frame(
Comparison = paste(c_1, c_2, sep = " vs "),
p_value = results_matrix[i, j]
))
}
}
# Display the first few rows of the results
head(results_df)
# Summary statistics
summary(results_df$p_value)
# Plot the distribution of p-values
ggplot(results_df, aes(x = p_value)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
theme_minimal() +
labs(title = "Distribution of p-values", x = "p-value", y = "Count")
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value[1,2], "\n")
}
}
# Set diagonal to 1 (self-comparison)
diag(results_matrix) <- 1
# Export P-value matrix as .mat file
writeMat("p_value_matrix.mat", p_value_matrix = results_matrix)
cat("\nP-value matrix exported to 'p_value_matrix.mat'\n")
# Convert results to a data frame for analysis
results_df <- data.frame()
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- paste(combinations_indices[i, ], collapse = ",")
c_2 <- paste(combinations_indices[j, ], collapse = ",")
results_df <- rbind(results_df, data.frame(
Comparison = paste(c_1, c_2, sep = " vs "),
p_value = results_matrix[i, j]
))
}
}
# Display the first few rows of the results
head(results_df)
# Summary statistics
summary(results_df$p_value)
# Plot the distribution of p-values
ggplot(results_df, aes(x = p_value)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
theme_minimal() +
labs(title = "Distribution of p-values", x = "p-value", y = "Count")
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] #- means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] #- means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value[1,2], "\n")
}
}
# Set diagonal to 1 (self-comparison)
diag(results_matrix) <- 1
# Export P-value matrix as .mat file
writeMat("p_value_matrix.mat", p_value_matrix = results_matrix)
cat("\nP-value matrix exported to 'p_value_matrix.mat'\n")
# Convert results to a data frame for analysis
results_df <- data.frame()
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- paste(combinations_indices[i, ], collapse = ",")
c_2 <- paste(combinations_indices[j, ], collapse = ",")
results_df <- rbind(results_df, data.frame(
Comparison = paste(c_1, c_2, sep = " vs "),
p_value = results_matrix[i, j]
))
}
}
# Display the first few rows of the results
head(results_df)
# Summary statistics
summary(results_df$p_value)
# Plot the distribution of p-values
ggplot(results_df, aes(x = p_value)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
theme_minimal() +
labs(title = "Distribution of p-values", x = "p-value", y = "Count")
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value[1,2], "\n")
}
}
# Set diagonal to 1 (self-comparison)
diag(results_matrix) <- 1
# Export P-value matrix as .mat file
writeMat("p_value_matrix.mat", p_value_matrix = results_matrix)
cat("\nP-value matrix exported to 'p_value_matrix.mat'\n")
# Convert results to a data frame for analysis
results_df <- data.frame()
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- paste(combinations_indices[i, ], collapse = ",")
c_2 <- paste(combinations_indices[j, ], collapse = ",")
results_df <- rbind(results_df, data.frame(
Comparison = paste(c_1, c_2, sep = " vs "),
p_value = results_matrix[i, j]
))
}
}
# Display the first few rows of the results
head(results_df)
# Summary statistics
summary(results_df$p_value)
# Plot the distribution of p-values
ggplot(results_df, aes(x = p_value)) +
geom_histogram(bins = 30, fill = "lightgreen", color = "black") +
theme_minimal() +
labs(title = "Distribution of p-values", x = "p-value", y = "Count")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
# Import data
runtime_data <- as.matrix(read.csv('runtime_data_3d.csv', header=FALSE))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(Hmisc)
library(tidyverse)
library(R.matlab)
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- runtime_array[, c_1[1] + 1, c_1[2] + 1] - means[, c_1[1] + 1]
r_2 <- runtime_array[, c_2[1] + 1, c_2[2] + 1] - means[, c_2[1] + 1]
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value[1,2], "\n")
}
}
# Set diagonal to 1 (self-comparison)
diag(results_matrix) <- 1
# Export P-value matrix as .mat file
writeMat("p_value_matrix.mat", p_value_matrix = results_matrix)
cat("\nP-value matrix exported to 'p_value_matrix.mat'\n")
log
# Import data from .mat file
mat_data <- readMat('runtime_data.mat')
runtime_array <- mat_data$runtime.list
# Calculate means
means <- apply(runtime_array, c(1, 2), mean)
# Recreate the combinations_indices
combinations_indices <- lapply(0:3, function(i) c(i, 0, i, 1, i, 49, i, 99))
combinations_indices <- matrix(unlist(combinations_indices), ncol=2, byrow=TRUE)
# Function to perform Hoeffding test
perform_hoeffding_test <- function(c_1, c_2) {
r_1 <- log(runtime_array[, c_1[1] + 1, c_1[2] + 1]) - log(means[, c_1[1] + 1])
r_2 <- log(runtime_array[, c_2[1] + 1, c_2[2] + 1]) - log(means[, c_2[1] + 1])
result <- hoeffd(r_1, r_2)
return(list(D = result$D, p_value = result$P))
}
# Perform pairwise comparisons
n_combinations <- nrow(combinations_indices)
results_matrix <- matrix(NA, nrow = n_combinations, ncol = n_combinations)
for (i in 1:(n_combinations - 1)) {
for (j in (i + 1):n_combinations) {
c_1 <- combinations_indices[i, ]
c_2 <- combinations_indices[j, ]
test_result <- perform_hoeffding_test(c_1, c_2)
results_matrix[i, j] <- test_result$p_value[1, 2]
results_matrix[j, i] <- test_result$p_value[1, 2]
cat("Comparison:", paste(c_1, collapse=","), paste(c_2, collapse=","),
"D:", test_result$D, "p-value:", test_result$p_value[1,2], "\n")
}
}
runtime_array[, 1, 1]
runtime_array[, 1, 1] - means[, 1]
(runtime_array[, 1, 1] - means[, 1]) / means[, 1]
